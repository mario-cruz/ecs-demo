name: AWS Update Task Definition

on:
  workflow_dispatch:
    branches:
      - dev
      - main
    inputs:
      environment:
        description: 'Environment to run against'
        type: choice
        options:
          - development
          - production
        default: development
        required: true
      image_url:
        description: 'URL Image to deploy'
        default: 'docker.io/aschil/snake:latestsha256:ab807cd743c719dadc67153798c537fb0e987170c428bdd47dbc2cbd3bc15e00'
        required: true

permissions:
  contents: read
  actions: read

env:
  AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  AWS_REGION: "${{ vars.AWS_REGION }}"
  ENV: "${{ vars.ENV }}"

jobs:
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: "${{ inputs.environment }}"

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      # Set AWS credentials and region
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      # Set new image on Amazon ECS task definition
      - name: Set new image on Amazon ECS task definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: mario_container
          image: ${{ github.event.inputs.image_url }}
          environment-variables: "LOG_LEVEL=info"
      # Apply new Task Definition to ECS Cluster
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: app-ecs-service
          cluster: app-ecs-cluster
          wait-for-service-stability: true
